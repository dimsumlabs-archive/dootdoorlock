#!/usr/bin/env python3
from threading import Timer
import argparse
import select
import socket
import sys
import os


DOOR_PIN = 17
SOCK_PATH = '/tmp/doord'


class Door(object):

    def __init__(self, open_seconds=5):
        self.open_seconds = 5
        # Hack to run cancel without conditionals
        self.timer = Timer(0, lambda: None)

        filename = '/sys/class/gpio/gpio{pin}/value'.format(pin=DOOR_PIN)
        try:
            self._fd = open(filename, 'wb', buffering=0)
            print('Raspi open interface')
        except IOError as e:
            if e.errno == 2:
                self._fd = open('/dev/null', 'wb', buffering=0)
            else:
                raise

    def open(self):
        self._fd.write(b'1')

        self.timer.cancel()
        self.timer = Timer(self.open_seconds, self.close)
        self.timer.start()

        print('Opened door')

    def close(self):
        self._fd.write(b'0')
        print('Closed door')


def events():
    try:
        os.unlink(SOCK_PATH)
    except OSError:
        if os.path.exists(SOCK_PATH):
            raise

    server = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
    server.setblocking(0)
    server.bind(SOCK_PATH)
    server.listen(1)

    try:
        os.chown(SOCK_PATH, -1, 1005)
        os.chmod(SOCK_PATH, 0o770)
    except OSError:
        sys.stderr.write('Cannot set socket permissions, not running as root?')
        raise

    epoll = select.epoll()
    epoll.register(server.fileno(), select.EPOLLIN)

    try:
        connections = {}

        while True:
            events = epoll.poll(1)
            for fileno, event in events:
                if fileno == server.fileno():
                    conn, addr = server.accept()
                    conn.setblocking(0)
                    epoll.register(conn, select.EPOLLIN)
                    connections[conn.fileno()] = conn

                elif event & select.EPOLLIN:
                    req = connections[fileno].recv(1024)
                    if not req:
                        epoll.unregister(fileno)
                        connections[fileno].close()
                        del connections[fileno]

                    evt = req.decode('utf8').rstrip('\r')
                    evt = evt.rstrip('\n').rstrip('\n')
                    if evt:
                        yield evt

    finally:
        epoll.unregister(server.fileno())
        epoll.close()
        server.close()
        os.unlink(SOCK_PATH)


if __name__ == '__main__':

    parser = argparse.ArgumentParser(description='DSL door opening daemon')
    parser.parse_args()

    door = Door()
    for evt in events():

        if evt == 'OPEN':
            door.open()

        elif evt == 'CLOSE':
            door.close()
